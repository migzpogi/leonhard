trigger:
  tags:
    include:
      - v*

pool:
  vmImage: 'ubuntu-16.04'

stages:
  - stage: test
    displayName: "Run Tests"
    jobs:
      - job: unit_tests
        displayName: "Run Unit Tests"
        pool:
          vmImage: "ubuntu-16.04"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
            displayName: "Use Python 3.x"
          - script: pip install pytest==5.3.0 pytest-cov==2.10.0
            displayName: "Install Pytest"
          - script: pytest
            displayName: "Run unit tests"
          - task: PublishTestResults@2
            displayName: "Publish unit test results"
            inputs:
              testResultsFiles: "tests.xml"
              testRunTitle: Test
          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage"
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "$(System.DefaultWorkingDirectory)//coverage.xml"
              reportDirectory: "$(System.DefaultWorkingDirectory)//htmlcov"

  - stage: build
    displayName: "Build wheel file"
    dependsOn:
      - test
    condition: succeeded()
    jobs:
      - job: build_wheel
        displayName: "Build wheel file"
        pool:
          vmImage: "ubuntu-16.04"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
            displayName: "Use Python 3.x"
          - script: pip install --upgrade pip setuptools wheel
            displayName: "Install tools"
          - script: python setup.py sdist bdist_wheel
            displayName: "Build wheel file"
          - task: CopyFiles@2
            inputs:
              targetFolder: $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "dist"
              publishLocation: "Container"

  - stage: deploy_to_test
    displayName: "Deploy to PyPi Test"
    dependsOn:
      - build
    condition: succeeded()
    jobs:
      - deployment: deploy_to_test
        displayName: "Deploy to PyPi Test"
        environment: "test"
        pool:
          vmImage: "ubuntu-16.04"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "3.x"
                  displayName: "Use Python 3.x"
                - script: pip install twine
                  displayName: "Install Twine"
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: "dist"
                    downloadPath: "$(System.DefaultWorkingDirectory)"
                - script: twine upload --repository testpypi dist/dist/* -u $(TWINE_USER) -p $(TWINE_PASS)
                  displayName: "Twine upload to PyPi Test"

  - stage: deploy_to_prod
    displayName: "Deploy to PyPi Prod"
    dependsOn:
      - deploy_to_test
    condition: succeeded()
    jobs:
      - deployment: deploy_to_prod
        displayName: "Deploy to PyPi Prod"
        environment: "release"
        pool:
          vmImage: "ubuntu-16.04"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: "3.x"
                  displayName: "Use Python 3.x"
                - script: pip install twine
                  displayName: "Install Twine"
                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: "dist"
                    downloadPath: "$(System.DefaultWorkingDirectory)"
                - script: twine upload dist/dist/* -u $(TWINE_USER_P) -p $(TWINE_PASS_P)
                  displayName: "Twine upload to PyPi Prod"